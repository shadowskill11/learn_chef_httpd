# this file was created by following the test kitchen learn.chef.io module here:  https://learn.chef.io/modules/local-development/rhel/virtualbox/apply-a-cookbook#/
# an explanation of all of the entries in this file can be found on chef's kitchen.yml page here:  https://docs.chef.io/config_yml_kitchen.html
---
# driver specifies the software that manages the machine. We're using the Vagrant Test Kitchen driver 
# (list of other popular drivers here: https://docs.chef.io/config_yml_kitchen.html#drivers). 
# The Vagrant driver works with VirtualBox by default.
driver:
  name: vagrant
network:
    - ["public_network"]  # creates a second interface used to allow connectivity between VMs and to other devices on the network - https://www.vagrantup.com/docs/networking/public_network.html
customize:
  memory:  512  # set the amount of memory for each VM to 512 MB
 
# provisioner specifies how to run Chef. We use chef_zero because it enables you to mimic a Chef server 
# environment on your local machine. This allows us to work with node attributes and other Chef server features.
provisioner:
# specifies how Chef Infra Client will be simulated during testing. chef_zero and chef_solo are the most common provisioners used for testing cookbooks
  name: chef_zero
  product_name: chef
  product_version: 14.12.9
 
# verifier specifies which application to use when running automated tests.
verifier:
  name: inspec
 
# platforms specifies the target operating systems. We're targeting just one ï¿½ CentOS 7.
platforms:
  - name: centos-7
 
# suites specifies what we want to apply to the virtual environment. You can have more than one suite. 
# Here we define one for each of the servers for the PA. 
suites:
  - name: cgsp-2-core  # name of the instance to create
    driver:
      vm_hostname: core.SparkIT-Games.com
    run_list:
      # This defines which recipes to run and the order to run them on the instance. The recipes are 
      # stored in the recipes folder inside your cookbook (learn_chef_httpd).  In this example, we are 
      # using the default recipe from the getting started with test kitchen module from learn.chef.io.
      - recipe[learn_chef_httpd::default]
    attributes:
 
  - name: cg2-web-front
    driver:
      vm_hostname: front.SparkIT-Games.com
    run_list:
      - recipe[learn_chef_httpd::default]
    attributes:
 
  - name: cg2-web-back
    driver:
      vm_hostname: back.SparkIT-Games.com
    run_list:
      - recipe[learn_chef_httpd::default]
    attributes:
 
  - name: cg-db
    driver:
      vm_hostname: db.SparkIT-Games.com
    run_list:
      - recipe[learn_chef_httpd::default]
    attributes:
 
  - name: cg-2-micropayment
    driver:
      vm_hostname: micropayment.SparkIT-Games.com
    run_list:
      - recipe[learn_chef_httpd::default]
    attributes:
 
  - name: cg-2-CoopPlayCore
    driver:
      vm_hostname: coopCore.SparkIT-Games.com
    run_list:
      - recipe[learn_chef_httpd::default]
    attributes:
 
  - name: cg-2-CoopPlay-gw
    driver:
      vm_hostname: Coop-gw.SparkIT-Games.com
    run_list:
      - recipe[learn_chef_httpd::default]
    attributes:
 
  - name: cg-2-CoopPlay-env
    driver:
      vm_hostname: micropayment.SparkIT-Games.com
      
    run_list:
      - recipe[learn_chef_httpd::default]
    attributes:
